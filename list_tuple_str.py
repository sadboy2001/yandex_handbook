# Азбука

# Знакомые нам воспитанники детского сада наконец-то начали учить буквы.
# Воспитатель предложил ребятам назвать слова, которые начинаются с А, Б или В. Напишите программу, которая проверяет, что первая буква во всех словах — А, Б или В.

# Формат ввода
# Вводится натуральное число N N — количество слов, названных детьми.
# В каждой из последующих N N строк записано по одному слову строчными буквам.

# Формат вывода
# YES — если все слова начинаются с нужной буквы.
# NO — если хотя бы одно слово начинается не с нужной буквы.


num = []
for i in range(int(input())):
    num.append(str(input()))
b = 0
for i in num:
    i.lower()
    match i[0]:
        case 'а':
            b += 1
        case 'б':
            b += 1
        case 'в':
            b += 1
if b == len(num):
    print('YES')
else:
    print('NO')



# Анонс новости

# Местная новостная компания заказала сайт. Его неотъемлемая часть — новостная лента.
# Чтобы пользователи могли быстрее анализировать статьи, нужно сократить заголовки. Напишите программу, которая сокращает длинные заголовки до требуемой длины и завершает их многоточием ... при необходимости.

# Формат ввода
# Вводится натуральное число L L — необходимая длина заголовка.
# Вводится натуральное число N N — количество заголовков, которые требуется сократить.
# В каждой из последующих N N строк записано по одному заголовку.

# Формат вывода
# Сокращённые заголовки.

# Примечание
# Многоточие учитывается при подсчёте длины заголовка.


length_txt = int(input())
num_txt = int(input())
for i in range(num_txt):
    l_txt = (str(input()))
    if len(l_txt) > length_txt:
        print(l_txt[:length_txt - 3] + '...')
    else:
        print(l_txt)



# Очистка данных

# Местный провайдер собирает большое количество логов, однако зачастую файлы с отчётами приходят в негодность.
# Самые частые проблемы — ошибки вида ## и @@@.
# Напишите программу, которая избавляется от:

#     Двух символов # в начале информационных сообщений;
#     Строк, заканчивающихся тремя символами @.

# Формат ввода
# Вводятся строки отчёта. Признаком завершения ввода считается пустая строка.

# Формат вывода
# Очищенные данные.


txt_l = []
while (txt := str(input())) != '':
    if txt[-1:-4:-1] == '@@@':
        pass
    elif txt[0:2] == '##':
        txt_l.append(txt[2:len(txt)])
    else:
        txt_l.append(txt)
for i in range(len(txt_l)):
    print(str(txt_l[i]))


# А роза упала на лапу Азора 4.0

# Вернёмся к палиндромам — числам, словам и предложениям, которые читаются одинаково в оба направления.
# Напишите программу, которая определяет, относится ли введённая строка к палиндромам.

# Формат ввода
# Вводится строка.

# Формат вывода
# Требуется вывести YES — если введенная строка является палиндромом, иначе – NO.


txt = str(input())
if txt[-1:-len(txt) - 1:-1] == txt:
    print('YES')
else:
    print('NO')



# Зайка — 6

# Очередное путешествие родителей с детьми, очередная игра с поиском зверушек за окном.
# Давайте поиграем и найдём заек.

# Формат ввода
# В первой строке записано натуральное число N N — количество выделенных придорожных местностей.
# В каждой из N N последующих строк записано описание придорожной местности.

# Формат вывода
# Количество заек.


num = int(input())
b = 0
for i in range(num):
    if 'зайка' in (d := str(input())):
        b += d.count('зайка')
print(b)


# А и Б сидели на трубе

# Сложение чисел весьма простая задача.
# К сожалению, пользователи не всегда вводят данные так, как нам удобно.

# Формат ввода
# Два целых числа, разделённые пробелом.

# Формат вывода
# Одно целое число — сумма переданных чисел.


num = str(input())
b = 0
for i in range(len(num)):
    if num[i] == ' ':
        b = i
num_1 = int(num[0:b])
num_2 = int(num[b:len(num)])
print(num_1 + num_2)



# Зайка — 7

# Вновь поищем заек за окном поезда.

# Формат ввода
# В первой строке записано натуральное число N N — количество выделенных придорожных местностей.
# В каждой из N N последующих строк записано описание придорожной местности.

# Формат вывода
# Для каждой строки нужно найти положение первого зайки.
# Если в строке нет заек, то об этом нужно непременно сообщить.

# Примечание
# Для символов в строках используйте нумерацию с 1.



num = int(input())
txt = []
for i in range(num):
    txt.append(str(input()))
    if 'зайка' in txt[i]:
        print(txt[i].find('зайка') + 1)
    else:
        print('Заек нет =(')



# Частотный анализ на минималках

# Частотный анализ — подсчёт, какие символы чаще всего встречаются в тексте. Это важнейший инструмент взлома многих классических шифров — от шифра Цезаря и до шифровальной машины «Энигма». Выполним простой частотный анализ: выясним, какой символ встречается в тексте чаще всего.

# Формат ввода
# Вводятся строки, пока не будет введена строка «ФИНИШ».

# Формат вывода
# Выводится один символ в нижнем регистре — наиболее часто встречающийся.

# Примечания
# Пробелы в анализе не участвуют.
# Если в результате анализа получено несколько ответов, следует вывести первый по алфавиту.


txt_2 = ''
d = []
d_1 = []
while (txt := str(input())) != 'ФИНИШ':
    txt_2 += txt
b = list(txt_2.lower())
for i in b:
    if i != ' ':
        d += i
d.sort()
print(max(d, key=d.count))



# Найдётся всё

# Поиск информации — одна из основных нужд в современном мире.
# Создайте программу, которая реализует маленький компонент поисковой системы.

# Формат ввода
# Вводится натуральное число N N — количество страниц, среди которых требуется произвести поиск.
# В каждой из последующих N N строк записаны заголовки страниц.
# В последней строке записан поисковый запрос.

# Формат вывода
# Вывести все заголовки страниц, в которых присутствует поисковый запрос (регистр не имеет значения).
# Порядок заголовков должен сохраниться.


num = int(input())
txt = []
for i in range(num):
    txt.append(str(input()))
search = str(input())
for i in range(len(txt)):
    if search.lower() in txt[i].lower():
        print(txt[i])



# Меню питания

# В детском саду ежедневно подают новую кашу на завтрак.
# Каши чередуются в следующем порядке:

#     Манная;
#     Гречневая;
#     Пшённая;
#     Овсяная;
#     Рисовая.

# Напишите программу, которая строит расписание каш на ближайшие дни.

# Формат ввода
# Вводится натуральное число N N — количество дней.

# Формат вывода
# Вывести список каш в порядке подачи.



num = int(input())
b = 0
kasha = ('Манная', 'Гречневая', 'Пшённая', 'Овсяная', 'Рисовая')
while num != 0:
    print(kasha[b])
    num -= 1
    b += 1
    if b > 4:
        b = 0




# Массовое возведение в степень

# Часто возникают трудности, когда нужно выполнить множество однообразных операций. В таких случаях люди желают упростить себе работу. Напишите программу, которая возводит в заданную степень все числа, что передали пользователи.

# Формат ввода
# Вводится натуральное число N N — количество чисел.
# В каждой из последующих N N строк записано по одному числу.
# В последней строке записано натуральное число P P — степень, в которую требуется возвести числа.

# Формат вывода
# Последовательность чисел, являющихся ответом.



number_of = int(input())
num = []
for i in range(number_of):
    num.append(int(input()))
power = int(input())
for i in range(number_of):
    print(num[i] ** power)



# Массовое возведение в степень 2.0

# Продолжим упрощать себе работу, минуя множество одинаковых операций.
# Создадим новую программу, которая возводит в заданную степень все числа, переданные пользователем.

# Формат ввода
# В первой строке записана последовательность натуральных чисел, разделённых пробелами.
# Во второй строке записано натуральное число P P — степень, в которую требуется возвести числа.

# Формат вывода
# Последовательность чисел, являющихся ответом.
# Числа вывести в одну строку через пробел.



number_txt = str(input())
txt = []
txt = number_txt.split(' ')
num = int(input())
for i in range(len(txt)):
    print(int(txt[i]) ** num, end=' ')



# НОД 3.0

# Местному НИИ в очередной раз нужно находить наибольший общий делитель (НОД) нескольких чисел.
# Руководство института вернулось с этой задачей к нам.

# Формат ввода
# В единственной строке записывается последовательность натуральных чисел, разделённых пробелами.

# Формат вывода
# Требуется вывести одно натуральное число — НОД всех данных чисел.

# Примечание
# Самый распространенный способ поиска НОД — Алгоритм Эвклида.



num = str(input()).split(' ')
num = list(map(int, num))
num.sort(reverse=True)
a, b = int(num[0]), int(num[1])
while a // b != 0:
    if a % b == 0:
        break
    a, b = b, a % b
if len(num) > 2:
    i = 2
    while i < len(num):
        a = num[i]
        while a // b != 0:
            if a % b == 0:
                break
            a, b = b, a % b
        i += 1
print(b)



# А роза упала на лапу Азора 5.0

# И снова напишем программу, которая определяет, палиндромом перед нами или нет.

# Формат ввода
# Вводится строка.

# Формат вывода
# Если введённая строка относится к палиндрому, то вывести YES, а иначе — NO.

# Примечание
# При проверке не обращайте внимания на регистр и пробелы.



txt = str(input())
text = ''
text += txt[-1::-1]
if ''.join(text.lower().split(' ')) == ''.join(txt.lower().split(' ')):
    print('YES')
else:
    print('NO')