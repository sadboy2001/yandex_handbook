# Раз, два, три! Ёлочка, гори!

# В детском саду проводят новогодний утренник. Со знанием чисел и их порядком у детей пока есть небольшие проблемы, но цифру три знают все без исключения.

# Напишите программу, которая зажигает Ёлочку, когда все дети прокричат «Три!»
# Формат ввода

# Вводятся крики детей.
# Формат вывода

# Выводить «Режим ожидания...», пока дети не прокричат «Три!».
# В конце вывести «Ёлочка, гори!»


while (name := input()) != 'Три!':
    print('Режим ожидания...')
print('Ёлочка, гори!')


# Зайка — 3

# В задачнике ко второй лекции мы помогали детям искать зайца.
# На этот раз мы будем искать и считать сразу нескольких зайчат.
# Формат ввода

# Вводятся строки, описывающие придорожную местность.
# В конце поездки вводится «Приехали!»
# Формат вывода

# Количество строк, в которых есть зайка.


i = 0
while (name := input()) != 'Приехали!':
    if 'зайка' in name:
        i += 1
print(i)



# Внимание! Акция!

# В продуктовом магазине объявили акцию: «На все товары с ценой не менее 500 тугриков предоставляется скидка 10%».
# Нас попросили разработать программное обеспечение кассового автомата, которое будет считать итоговую сумму покупки с учётом скидки.
# Формат ввода

# Вводится некоторое количество рациональных чисел — стоимость товаров.
# Список завершается значением 0.
# Формат вывода

# Требуется вывести сумму всех товаров с учётом объявленной акции.



num_1 = 0
while (num := float(input())) != 0:
    if num >= 500:
        num_1 += num - num * 0.1
    else:
        num_1 += num
print(num_1)


# НОД

# В одном из местных НИИ часто требуется находить наибольший общий делитель (НОД) двух чисел.
# Вам уже доверяют, как одному из лучших «автоматизаторов» в округе, так что руководство НИИ решило заказать ПО у вас.
# Формат ввода

# Вводится два натуральных числа, каждое на своей строке.
# Формат вывода

# Требуется вывести одно натуральное число — НОД двух данных чисел.
# Примечание

# Самый распространенный способ поиска НОД — алгоритм Евклида.



num_a, num_b = int(input()), int(input())
while num_b != 0 and num_a != 0:
    if num_a > num_b:
        b = num_a % num_b
        num_a = num_b
        num_b = b
    else:
        b = num_b % num_a
        num_b = num_a
        num_a = b
if num_a == 0:
    print(num_b)
elif num_b == 0:
    print(num_a)



# НОК

# Спустя время НИИ потребовалось находить наименьшее общее кратное (НОК) двух чисел. К нам вновь обратились за помощью.
# Формат ввода

# Вводится два натуральных числа, каждое на своей строке.
# Формат вывода

# Требуется вывести одно натуральное число — НОК двух данных чисел.



num_a, num_b = int(input()), int(input())
num_1 = num_a
num_2 = num_b
while num_b != 0 and num_a != 0:
    if num_a > num_b:
        b = num_a % num_b
        num_a = num_b
        num_b = b
    else:
        b = num_b % num_a
        num_b = num_a
        num_a = b
if num_a == 0:
    print(num_1 * num_2 // num_b)
elif num_b == 0:
    print(num_1 * num_2 // num_a)



# Факториал

# Учёным срочно нужно ПО, которое находит факториал числа.
# Формат ввода

# Вводится одно неотрицательное число.
# Формат вывода

# Требуется вывести одно натуральное число — факториал заданного числа.
# Примечания

# Факториал нуля принят равным 1.



num = int(input())
b = 1
if num == 0:
    print(1)
else:
    for i in range(1, num + 1):
        b *= i
    print(b)



# Маршрут построен

# Навигация была важна во все времена.
# Нам достался архив маршрутов движения, но их оказалось так много, что без автоматизации мы с ними не справимся вовек. Каждый маршрут представляет собой последовательность шагов в одном из четырех направлений:

#     СЕВЕР;
#     ВОСТОК;
#     ЮГ;
#     ЗАПАД.

# Напишите программу, чтобы по заданному маршруту она определяла, в какой именно точке мы окажемся.
# Для простоты будем считать, что в начале маршрута мы находимся в точке (0; 0).
# Формат ввода

# Вводятся инструкции маршрута в виде:
# <направление>
# <количество шагов>
# Ввод завершается строкой СТОП.
# Формат вывода

# Два целых числа — координаты конечной точки маршрута.



x = 0
y = 0
while (txt := str(input())) != 'СТОП':
    num = int(input())
    if txt == 'СЕВЕР':
        x += num
    elif txt == 'ЮГ':
        x -= num
    elif txt == 'ВОСТОК':
        y += num
    elif txt == 'ЗАПАД':
        y -= num
print(x)
print(y)



# А роза упала на лапу Азора 2.0

# Вспомним о палиндромах, которые в обоих направлениях читаются одинаково. Напишите программу, которая проверяет, является ли число палиндромом.
# Формат ввода

# Одно натуральное число.
# Формат вывода

# YES — если число является палиндромом, иначе — NO.



num = str(input())
num_l = []
a = 0
for i in range(1, len(num)):
    num_l.append(num[-i])
num_l.append(num[0])
num_2 = ''.join(num_l)
if num == num_2:
    print('YES')
else:
    print('NO')


# Чётная чистота

# Мы уже достаточно знатоки, чтобы очистить число от определённых цифр, поэтому давайте напишем программу, которая уберёт все чётные цифры из числа.
# Формат ввода

# Одно натуральное число.
# Формат вывода

# Одно натуральное число — результат очистки.



num = str(input())
txt = []
for i in range(len(num)):
    if int(num[i]) % 2 > 0:
        txt.append(num[i])
txt = ''.join(txt)
print(txt)